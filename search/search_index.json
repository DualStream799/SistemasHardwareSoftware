{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sistemas Hardware-Software \u00b6 Bem vindo ao curso de Sistemas Hardware-Software 2021/1. Professor : Igor Montagner Avalia\u00e7\u00e3o \u00b6 A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; Os Laborat\u00f3rios ser\u00e3o disponibilizados neste site e dever\u00e3o ser entregues no reposit\u00f3rio de atividades da disciplina. A m\u00e9dia final \u00e9 dada por 10% Atividades 40% Laborat\u00f3rios 50% m\u00e9dia de Provas Condi\u00e7\u00f5es de barreira M\u00e9dia de provas >= 4,5 PI, PF >= 4,0 Laborat\u00f3rios >= 5 Caso estas condi\u00e7\u00f5es n\u00e3o sejam cumpridas ver detalhes na aula 01 Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Home"},{"location":"#sistemas-hardware-software","text":"Bem vindo ao curso de Sistemas Hardware-Software 2021/1. Professor : Igor Montagner","title":"Sistemas Hardware-Software"},{"location":"#avaliacao","text":"A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; Os Laborat\u00f3rios ser\u00e3o disponibilizados neste site e dever\u00e3o ser entregues no reposit\u00f3rio de atividades da disciplina. A m\u00e9dia final \u00e9 dada por 10% Atividades 40% Laborat\u00f3rios 50% m\u00e9dia de Provas Condi\u00e7\u00f5es de barreira M\u00e9dia de provas >= 4,5 PI, PF >= 4,0 Laborat\u00f3rios >= 5 Caso estas condi\u00e7\u00f5es n\u00e3o sejam cumpridas ver detalhes na aula 01 Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Avalia\u00e7\u00e3o"},{"location":"sobre/","text":"Plano de aulas \u00b6 SEG 13:30 - 15:40 QUI 15:45 - 17:45 Atendimento: QUI 14:00 - 15:30 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 24/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 27/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 31/08 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de inteiros na CPU: n\u00fameros bin\u00e1rios e hexadecimais, complemento de dois, opera\u00e7\u00f5es bit a bit. Leitura: Cap 2 CS:APP; Cap 9 Stallings 03/09 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de ponteiros, arrays e estruturas em RAM. Leitura: Cap 2 CS:APP; Cap 9 Stallings 07/09 FERIADO FERIADO 10/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: registradores, mem\u00f3ria e endere\u00e7amento Assembly: Organiza\u00e7\u00e3o de um execut\u00e1vel no disco e na mem\u00f3ria Leitura: Cap 3.1 \u2013 3.4 CS:APP 14/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: chamadas de fun\u00e7\u00e3o e pilha Assembly: Exerc\u00edcios com chamadas de fun\u00e7\u00e3o e opera\u00e7\u00f5es com inteiros Leitura: Cap 3.5 CS:APP 17/09 Como a CPU representa e executa um programa escrito em C? Assembly: express\u00f5es booleanas e estruturas de controle condicionais 21/09 Como a CPU representa e executa um programa escrito em C? Assembly: estruturas de controle de loop Leitura: Cap 3.6 CS:APP 24/09 Como a CPU representa e executa um programa escrito em C? Revis\u00e3o; organiza\u00e7\u00e3o de execut\u00e1vel no disco e na mem\u00f3ria Assembly: vari\u00e1veis locais, strings e arrays Leitura: Cap 3.7 \u2013 3.8 CS:APP 28/09 Como a CPU representa e executa um programa escrito em C? Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 01/10 E se meu programa precisar de mais mem\u00f3ria? A fun\u00e7\u00e3o malloc e a aloca\u00e7\u00e3o din\u00e2mica de estruturas, arrays e strings. Uso da ferramenta valgrind para checagem de mem\u00f3ria Leituras: Cap 16 Kochan (Prog in C); Cap 9.9 CS:APP 05/10 E se meu programa precisar de mais mem\u00f3ria? Tipos Abstratos de dados e aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria Leituras: Cap 6 K&R 08/10 PROVA INTERMEDI\u00c1RIA PROVA INTERMEDI\u00c1RIA 12/10 FERIADO FERIADO 15/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Vis\u00e3o global de um sistema: kernel, sistema de arquivos, biblioteca padr\u00e3o e bootloaders Leitura: Cap 10.2 Tanenbaum; Kivity et al 2014. 19/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 22/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 26/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para entrada/sa\u00edda Leitura: Cap 8 CS:APP, 29/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para cria\u00e7\u00e3o de processo (fork) e espera de seus resultados (wait). Leitura: Cap 8 CS:APP, Leitura complementar sobre escalonamento de processos: Cap 5 Silberschats 02/11 FERIADO PROVA INTERMEDI\u00c1RIA 05/11 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para execu\u00e7\u00e3o de programas (exec) Leitura: Cap 8 CS:APP, 09/11 E se o SO quiser avisar um processo que algo ocorreu? Sinais: conceitos, captura e bloqueio. Introdu\u00e7\u00e3o \u00e0 ideia de concorr\u00eancia 12/11 E se o SO quiser avisar um processo que algo ocorreu? Captura e bloqueio de sinais: teoria e exerc\u00edcios pr\u00e1ticos 16/11 Como envio informa\u00e7\u00f5es entre processos? Entrada e sa\u00edda padr\u00e3o, chamadas de sistema pipe, dup2 para redirecionamento de arquivos. 19/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Introdu\u00e7\u00e3o ao conceito de threads e sua utiliza\u00e7\u00e3o Cria\u00e7\u00e3o de threads usando pthreads. Leitura: Cap 12 CS:APP 23/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Tarefas IO- e CPU-bound. Sincroniza\u00e7\u00e3o usando sem\u00e1foros. Leitura: Cap 12 CS:APP 26/11 PROVA FINAL PROVA FINAL 30/11 PROVA FINAL PROVA FINAL 03/12 nan nan 07/12 PROVA SUB PROVA SUB","title":"Burocracias"},{"location":"sobre/#plano-de-aulas","text":"SEG 13:30 - 15:40 QUI 15:45 - 17:45 Atendimento: QUI 14:00 - 15:30 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 24/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 27/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 31/08 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de inteiros na CPU: n\u00fameros bin\u00e1rios e hexadecimais, complemento de dois, opera\u00e7\u00f5es bit a bit. Leitura: Cap 2 CS:APP; Cap 9 Stallings 03/09 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de ponteiros, arrays e estruturas em RAM. Leitura: Cap 2 CS:APP; Cap 9 Stallings 07/09 FERIADO FERIADO 10/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: registradores, mem\u00f3ria e endere\u00e7amento Assembly: Organiza\u00e7\u00e3o de um execut\u00e1vel no disco e na mem\u00f3ria Leitura: Cap 3.1 \u2013 3.4 CS:APP 14/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: chamadas de fun\u00e7\u00e3o e pilha Assembly: Exerc\u00edcios com chamadas de fun\u00e7\u00e3o e opera\u00e7\u00f5es com inteiros Leitura: Cap 3.5 CS:APP 17/09 Como a CPU representa e executa um programa escrito em C? Assembly: express\u00f5es booleanas e estruturas de controle condicionais 21/09 Como a CPU representa e executa um programa escrito em C? Assembly: estruturas de controle de loop Leitura: Cap 3.6 CS:APP 24/09 Como a CPU representa e executa um programa escrito em C? Revis\u00e3o; organiza\u00e7\u00e3o de execut\u00e1vel no disco e na mem\u00f3ria Assembly: vari\u00e1veis locais, strings e arrays Leitura: Cap 3.7 \u2013 3.8 CS:APP 28/09 Como a CPU representa e executa um programa escrito em C? Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 01/10 E se meu programa precisar de mais mem\u00f3ria? A fun\u00e7\u00e3o malloc e a aloca\u00e7\u00e3o din\u00e2mica de estruturas, arrays e strings. Uso da ferramenta valgrind para checagem de mem\u00f3ria Leituras: Cap 16 Kochan (Prog in C); Cap 9.9 CS:APP 05/10 E se meu programa precisar de mais mem\u00f3ria? Tipos Abstratos de dados e aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria Leituras: Cap 6 K&R 08/10 PROVA INTERMEDI\u00c1RIA PROVA INTERMEDI\u00c1RIA 12/10 FERIADO FERIADO 15/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Vis\u00e3o global de um sistema: kernel, sistema de arquivos, biblioteca padr\u00e3o e bootloaders Leitura: Cap 10.2 Tanenbaum; Kivity et al 2014. 19/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 22/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 26/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para entrada/sa\u00edda Leitura: Cap 8 CS:APP, 29/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para cria\u00e7\u00e3o de processo (fork) e espera de seus resultados (wait). Leitura: Cap 8 CS:APP, Leitura complementar sobre escalonamento de processos: Cap 5 Silberschats 02/11 FERIADO PROVA INTERMEDI\u00c1RIA 05/11 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para execu\u00e7\u00e3o de programas (exec) Leitura: Cap 8 CS:APP, 09/11 E se o SO quiser avisar um processo que algo ocorreu? Sinais: conceitos, captura e bloqueio. Introdu\u00e7\u00e3o \u00e0 ideia de concorr\u00eancia 12/11 E se o SO quiser avisar um processo que algo ocorreu? Captura e bloqueio de sinais: teoria e exerc\u00edcios pr\u00e1ticos 16/11 Como envio informa\u00e7\u00f5es entre processos? Entrada e sa\u00edda padr\u00e3o, chamadas de sistema pipe, dup2 para redirecionamento de arquivos. 19/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Introdu\u00e7\u00e3o ao conceito de threads e sua utiliza\u00e7\u00e3o Cria\u00e7\u00e3o de threads usando pthreads. Leitura: Cap 12 CS:APP 23/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Tarefas IO- e CPU-bound. Sincroniza\u00e7\u00e3o usando sem\u00e1foros. Leitura: Cap 12 CS:APP 26/11 PROVA FINAL PROVA FINAL 30/11 PROVA FINAL PROVA FINAL 03/12 nan nan 07/12 PROVA SUB PROVA SUB","title":"Plano de aulas"},{"location":"aulas/01-inteiros/","text":"01 - Inteiros na CPU \u00b6 Os exerc\u00edcios da aula de hoje est\u00e3o no execut\u00e1vel bases_e_sinais .","title":"01 - Inteiros na CPU"},{"location":"aulas/01-inteiros/#01-inteiros-na-cpu","text":"Os exerc\u00edcios da aula de hoje est\u00e3o no execut\u00e1vel bases_e_sinais .","title":"01 - Inteiros na CPU"},{"location":"aulas/02-ram/","text":"02 - Representa\u00e7\u00e3o de dados em RAM \u00b6 Experimentos \u00b6 Vamos trabalhar com os arquivos experimento0-4.c . Compile e execute cada um deles e coloque suas sa\u00eddas abaixo. Comente os resultados comparando os valores das constantes no c\u00f3digo em C e a sa\u00edda dos programas. Question Examine o c\u00f3digo C do arquivo experimento0.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento1.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento2.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento3.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento4.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Representa\u00e7\u00e3o de struct em RAM \u00b6 A utiliza\u00e7\u00e3o de struct junta tudo que j\u00e1 vimos sobre representa\u00e7\u00e3o de todos os tipos de dados na mem\u00f3ria. N\u00e3o se esque\u00e7a de levar em conta as quest\u00f5es de alinhamento mostradas na parte expositiva da aula. Warning Voc\u00ea n\u00e3o dever\u00e1 abrir o c\u00f3digo de parte1.c . Ele est\u00e1 no reposit\u00f3rio para voc\u00ea poder conferir suas respostas. Example Compile e execute parte1.c . Example Os endere\u00e7os mostrados na sa\u00edda de parte1 pertencem a um s\u00f3 struct declarado como struct player one . Quais s\u00e3o os tamanhos de cada campo? Dica : pode n\u00e3o ser poss\u00edvel identificar exatamente o tamanho de cada campo, mas \u00e9 esperado que voc\u00ea identifique ao menos o tamanho m\u00e1ximo de cada um. Example A segunda parte da sa\u00edda de parte1 mostra os endere\u00e7os de cada campo do struct. Note que &one e &one.icon s\u00e3o iguais. Voc\u00ea consegue explicar por que? Se n\u00e3o, volte na aula expositiva e reveja a parte sobre struct e alinhamento de mem\u00f3ria. Question Baseado nas respostas acima, declare abaixo o struct . Escreva-o da mesma maneira que usaria em um programa em C . Confira suas respostas com parte1.c . Examinando a execu\u00e7\u00e3o de programas usando gdb \u00b6 Podemos examinar um programa durante sua execu\u00e7\u00e3o usando o gdb . Podemos parar em qualquer instru\u00e7\u00e3o do programa, examinar conte\u00fado de registradores e da mem\u00f3ria e listar todos os s\u00edmbolos dispon\u00edveis (que podem ser fun\u00e7\u00f5es ou vari\u00e1veis globais). Example Para compilar um programa com suporte a debugging usamos a flag -g do gcc $> gcc -g -Wall -pedantic exemplo1.c Siga os passos abaixo para para carregar um programa usando o gdb . Lance o gdb e passe para ele seu programa: $> gdb ./exemplo1 Isto nos colocar\u00e1 em um prompt esperando comandos. Para rodar o programa at\u00e9 o fim execute (gdb) run Para sair, (gdb) quit Tip O gdb \u00e9 uma ferramenta poderosa que possui muitas op\u00e7\u00f5es. Sua documenta\u00e7\u00e3o est\u00e1 online e pode ser vista em https://sourceware.org/gdb/current/onlinedocs/gdb/index.html#Top . Nesta primeira parte iremos abrir o arquivo parte2.c e olhar seu conte\u00fado. Tamb\u00e9m executaremos o programa compilado parte2 . Question Abra o c\u00f3digo parte2.c e liste os nomes das vari\u00e1veis globais declaradas e seus tamanhos. Anote tamb\u00e9m as fun\u00e7\u00f5es declaradas. Question O comando info mostra informa\u00e7\u00f5es que podem ser obtidas a partir de um execut\u00e1vel. Execute-o e veja o que acontece. Example Use info para mostrar as fun\u00e7\u00f5es e vari\u00e1veis globais que existem em parte2 . Warning Muitos dos nomes s\u00e3o estranhos. Eles fazem parte do padr\u00e3o de arquivos execut\u00e1veis ELF , que cont\u00e9m informa\u00e7\u00f5es espec\u00edficas do sistema operacional usado. Voc\u00ea n\u00e3o precisa se preocupar com estes nomes. Question Qual \u00e9 o significado da primeira coluna do comando info variables ? Dica : o valor est\u00e1 em hexadecimal, que usamos na expositiva para mostrar ponteiros. Example Podemos usar o comando print para mostrar o valor inicial das vari\u00e1veis globais identificadas. Mostre o valor inicial de global_var usando este comando e compare com o visto no arquivo parte2.c . Dicas: Pode n\u00e3o funcionar de primeira. O qu\u00ea a mensagem de erro diz? A sintaxe de convers\u00e3o de tipos de C ( casting ) pode ser \u00fatil aqui. Example Podemos usar o gdb tamb\u00e9m para examinar a mem\u00f3ria de um execut\u00e1vel. Acesse esta p\u00e1gina da documenta\u00e7\u00e3o , entenda como usar o comando x e escreva abaixo qual o comando usado para mostrar o conte\u00fado do segundo item do vetor global_array . Em seguida, teste-o e verifique que ele funcionou corretamente. Dicas : volte nos exerc\u00edcios anteriores e encontre o endere\u00e7o do in\u00edcio do vetor calcule o endere\u00e7o do segundo elemento manualmente e passe para o comando x n\u00e3o se esque\u00e7a de buscar na mem\u00f3ria o tamanho correto do elemento Example global_array tem tipo short . Ou seja, \u00e9 formado por dois bytes. Mostre agora o conte\u00fado de cada um deles. Ou seja, voc\u00ea dever\u00e1 dar dois comandos para examinar a mem\u00f3ria. Explique como converter esses dois bytes para o valor mostrado no exerc\u00edcio anterior. Example Use agora o comando x para exibir global_str como uma string . Escreva o comando abaixo.","title":"02 - Representa\u00e7\u00e3o de dados em RAM"},{"location":"aulas/02-ram/#02-representacao-de-dados-em-ram","text":"","title":"02 - Representa\u00e7\u00e3o de dados em RAM"},{"location":"aulas/02-ram/#experimentos","text":"Vamos trabalhar com os arquivos experimento0-4.c . Compile e execute cada um deles e coloque suas sa\u00eddas abaixo. Comente os resultados comparando os valores das constantes no c\u00f3digo em C e a sa\u00edda dos programas. Question Examine o c\u00f3digo C do arquivo experimento0.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento1.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento2.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento3.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa. Question Examine o c\u00f3digo C do arquivo experimento4.c e compare com o resultado de sua execu\u00e7\u00e3o. H\u00e1 algo estranho? Se sim, escreva abaixo algumas hip\u00f3teses para o comportamento do programa.","title":"Experimentos"},{"location":"aulas/02-ram/#representacao-de-struct-em-ram","text":"A utiliza\u00e7\u00e3o de struct junta tudo que j\u00e1 vimos sobre representa\u00e7\u00e3o de todos os tipos de dados na mem\u00f3ria. N\u00e3o se esque\u00e7a de levar em conta as quest\u00f5es de alinhamento mostradas na parte expositiva da aula. Warning Voc\u00ea n\u00e3o dever\u00e1 abrir o c\u00f3digo de parte1.c . Ele est\u00e1 no reposit\u00f3rio para voc\u00ea poder conferir suas respostas. Example Compile e execute parte1.c . Example Os endere\u00e7os mostrados na sa\u00edda de parte1 pertencem a um s\u00f3 struct declarado como struct player one . Quais s\u00e3o os tamanhos de cada campo? Dica : pode n\u00e3o ser poss\u00edvel identificar exatamente o tamanho de cada campo, mas \u00e9 esperado que voc\u00ea identifique ao menos o tamanho m\u00e1ximo de cada um. Example A segunda parte da sa\u00edda de parte1 mostra os endere\u00e7os de cada campo do struct. Note que &one e &one.icon s\u00e3o iguais. Voc\u00ea consegue explicar por que? Se n\u00e3o, volte na aula expositiva e reveja a parte sobre struct e alinhamento de mem\u00f3ria. Question Baseado nas respostas acima, declare abaixo o struct . Escreva-o da mesma maneira que usaria em um programa em C . Confira suas respostas com parte1.c .","title":"Representa\u00e7\u00e3o de struct em RAM"},{"location":"aulas/02-ram/#examinando-a-execucao-de-programas-usando-gdb","text":"Podemos examinar um programa durante sua execu\u00e7\u00e3o usando o gdb . Podemos parar em qualquer instru\u00e7\u00e3o do programa, examinar conte\u00fado de registradores e da mem\u00f3ria e listar todos os s\u00edmbolos dispon\u00edveis (que podem ser fun\u00e7\u00f5es ou vari\u00e1veis globais). Example Para compilar um programa com suporte a debugging usamos a flag -g do gcc $> gcc -g -Wall -pedantic exemplo1.c Siga os passos abaixo para para carregar um programa usando o gdb . Lance o gdb e passe para ele seu programa: $> gdb ./exemplo1 Isto nos colocar\u00e1 em um prompt esperando comandos. Para rodar o programa at\u00e9 o fim execute (gdb) run Para sair, (gdb) quit Tip O gdb \u00e9 uma ferramenta poderosa que possui muitas op\u00e7\u00f5es. Sua documenta\u00e7\u00e3o est\u00e1 online e pode ser vista em https://sourceware.org/gdb/current/onlinedocs/gdb/index.html#Top . Nesta primeira parte iremos abrir o arquivo parte2.c e olhar seu conte\u00fado. Tamb\u00e9m executaremos o programa compilado parte2 . Question Abra o c\u00f3digo parte2.c e liste os nomes das vari\u00e1veis globais declaradas e seus tamanhos. Anote tamb\u00e9m as fun\u00e7\u00f5es declaradas. Question O comando info mostra informa\u00e7\u00f5es que podem ser obtidas a partir de um execut\u00e1vel. Execute-o e veja o que acontece. Example Use info para mostrar as fun\u00e7\u00f5es e vari\u00e1veis globais que existem em parte2 . Warning Muitos dos nomes s\u00e3o estranhos. Eles fazem parte do padr\u00e3o de arquivos execut\u00e1veis ELF , que cont\u00e9m informa\u00e7\u00f5es espec\u00edficas do sistema operacional usado. Voc\u00ea n\u00e3o precisa se preocupar com estes nomes. Question Qual \u00e9 o significado da primeira coluna do comando info variables ? Dica : o valor est\u00e1 em hexadecimal, que usamos na expositiva para mostrar ponteiros. Example Podemos usar o comando print para mostrar o valor inicial das vari\u00e1veis globais identificadas. Mostre o valor inicial de global_var usando este comando e compare com o visto no arquivo parte2.c . Dicas: Pode n\u00e3o funcionar de primeira. O qu\u00ea a mensagem de erro diz? A sintaxe de convers\u00e3o de tipos de C ( casting ) pode ser \u00fatil aqui. Example Podemos usar o gdb tamb\u00e9m para examinar a mem\u00f3ria de um execut\u00e1vel. Acesse esta p\u00e1gina da documenta\u00e7\u00e3o , entenda como usar o comando x e escreva abaixo qual o comando usado para mostrar o conte\u00fado do segundo item do vetor global_array . Em seguida, teste-o e verifique que ele funcionou corretamente. Dicas : volte nos exerc\u00edcios anteriores e encontre o endere\u00e7o do in\u00edcio do vetor calcule o endere\u00e7o do segundo elemento manualmente e passe para o comando x n\u00e3o se esque\u00e7a de buscar na mem\u00f3ria o tamanho correto do elemento Example global_array tem tipo short . Ou seja, \u00e9 formado por dois bytes. Mostre agora o conte\u00fado de cada um deles. Ou seja, voc\u00ea dever\u00e1 dar dois comandos para examinar a mem\u00f3ria. Explique como converter esses dois bytes para o valor mostrado no exerc\u00edcio anterior. Example Use agora o comando x para exibir global_str como uma string . Escreva o comando abaixo.","title":"Examinando a execu\u00e7\u00e3o de programas usando gdb"},{"location":"aulas/03-arquitetura-x86/","text":"03 - Arquitetura x86-64 \u00b6 No handout passado usamos o gdb para listar vari\u00e1veis globais, nomes de fun\u00e7\u00f5es e examinar endere\u00e7os de mem\u00f3ria. Neste handout vamos come\u00e7ar a usar o gdb tamb\u00e9m para examinar nossos programas durante sua execu\u00e7\u00e3o . Parando e continuando a execu\u00e7\u00e3o de um programa. \u00b6 Question Compile funcao1.c usando as flags da disciplina ( -Og -g -Wall -std=c99 ). Abra o execut\u00e1vel com o gdb e liste suas fun\u00e7\u00f5es e suas vari\u00e1veis globais. N\u00e3o rode o programa ainda! Anote abaixo seus endere\u00e7os e nomes. Example O comando disas \u00e9 usado para mostrar as instru\u00e7\u00f5es de m\u00e1quina de uma fun\u00e7\u00e3o. Use-o para ver o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao1 . Liste abaixo quais registradores foram usados nesta fun\u00e7\u00e3o e qual o tamanho dos dados guardados neles. Example Com base nos tamanhos identificados, voc\u00ea consegue associar os registradores acima com as vari\u00e1veis no c\u00f3digo de funcao1 ? Example Use o comando breakpoint funcao1 para parar a execu\u00e7\u00e3o do programa quando a fun\u00e7\u00e3o funcao1 come\u00e7ar a executar. Execute o programa usando run . O qu\u00ea ocorre? Example Podemos usar o comando info registers edi para ver o conte\u00fado atual do registrador %edi . Qual \u00e9 este valor? Verifique quais argumentos s\u00e3o passados para funcao1 no c\u00f3digo C e, com estas informa\u00e7\u00f5es em m\u00e3os, verifique sua resposta da Tarefa 2 e escreva abaixo suas novas conclus\u00f5es. Example O comando stepi executa exatamente uma instru\u00e7\u00e3o de m\u00e1quina. Use-o uma vez e execute novamente disas funcao1 . O que aconteceu? \u00c9 poss\u00edvel saber em qual instru\u00e7\u00e3o o programa est\u00e1 parado? Dicas : use disas de novo verifique novamente o conte\u00fado de %edi Example Cheque novamente o valor de %edi . Este valor condiz com a instru\u00e7\u00e3o executada? O que ela faz, exatamente? Question Use stepi para parar logo antes do retorno da fun\u00e7\u00e3o. Verifique o conte\u00fado do registrador %eax e compare-o com os prints feitos pelo program. Voc\u00ea consegue dizer seu uso? Example Vamos agora analisar o registrador %rsi . Toda vez que um registrador aparece entre ( ) estamos fazendo um acesso a mem\u00f3ria. Ao mostrar seu conte\u00fado usando info registers rsi recebemos o endere\u00e7o de mem\u00f3ria que cont\u00e9m o dado que queremos acessar. Example Use o comando x para mostrar, em decimal, o int que est\u00e1 armazenado no endere\u00e7o descoberto no exerc\u00edcio anterior. Confira seu resultado com o c\u00f3digo. Example Execute o comando continue para continuar rodando o programa. Ele ir\u00e1 rodar at\u00e9 que o pr\u00f3ximo breakpoint seja alcan\u00e7ado ou at\u00e9 que o programa termine. Endere\u00e7amento relativo e vari\u00e1veis globais \u00b6 Na parte anterior analisamos o c\u00f3digo Assembly de nossa primeira fun\u00e7\u00e3o e vimos como mostrar o c\u00f3digo fonte de uma fun\u00e7\u00e3o usando disas mostrar o conte\u00fado de um registrador usando info registers executar exatamente uma instru\u00e7\u00e3o usando stepi Tamb\u00e9m vimos que ao colocar um registrador entre ( ) estamos fazendo um acesso a mem\u00f3ria. Esta opera\u00e7\u00e3o \u00e9 equivalente a desreferenciar um ponteiro usando *p . Neste roteiro iremos adicionar um detalhe importante: podemos fazer contas com endere\u00e7os usando esta nota\u00e7\u00e3o. Nos exemplo abaixo nos referimos a mem\u00f3ria como um grande vetor de bytes unsigned char M[] . Ou seja, ao acessar M[%rax] , por exemplo, estamos acessando o lugar na mem\u00f3ria cujo endere\u00e7o est\u00e1 escrito em %rax . 10(%rax) : acessa a mem\u00f3ria M[%rax + 10] . (%rax, %rdi, 4) : acessa a mem\u00f3ria M[%rax + 4 * % rdi] . Note que isto se parece com aritm\u00e9tica de ponteiros cujo tipo apontado seja inteiro, pois os endere\u00e7os pulam de 4 em 4 bytes. Example Saia e abra o gdb novamente. Mostre o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao2 e coloque um breakpoint em sua primeira instru\u00e7\u00e3o. Example Execute agora o programa. A execu\u00e7\u00e3o deve ter parado no in\u00edcio de funcao2 . Rode disas funcao2 . Question Voc\u00ea consegue identificar acessos a mem\u00f3ria em funcao2 ? Quais s\u00e3o de leitura e quais s\u00e3o de escrita? Qual o tamanho dos dados lidos/escritos? Question Qual o significado do registrador %rip ? Se n\u00e3o se lembrar reveja os slides. O tipo de acesso a mem\u00f3ria que estamos realizando se chama rip relative addressing . Este tipo de acesso \u00e9 reservado para vari\u00e1veis globais e dados somente leitura. Estes dados tem uma caracter\u00edstica especial: eles s\u00e3o copiados para a mem\u00f3ria seguindo o mesmo layout do arquivo execut\u00e1vel. Ou seja, as posi\u00e7\u00f5es relativas entre o c\u00f3digo e os dados globais s\u00e3o fixas. Question Anote abaixo o ende\u00e7o das fun\u00e7\u00f5es MOV que utilizam este acesso. Baseado nos exemplos acima, descubra o endere\u00e7o das vari\u00e1veis acessadas. Desenho de acesso a mem\u00f3ria usando %rip A figura abaixo ilustra como funciona o endere\u00e7amento usando o registrador %rip . Note que os deslocamentos s\u00e3o diferentes pois o endere\u00e7o da instru\u00e7\u00e3o atual \u00e9 diferente. Por\u00e9m, o resultado final do endere\u00e7o calculado em ambas instru\u00e7\u00f5es \u00e9 o mesmo, indicando que ambas se referem ao mesmo local na mem\u00f3ria. Example Confira se o valor identificado na quest\u00e3o anterior \u00e9 o mesmo mostrado a direita das instru\u00e7\u00f5es MOV na sa\u00edda do disas . O gdb j\u00e1 calcula este endere\u00e7o para facilitar nossa vida, mas \u00e9 interessante calcular isto manualmente uma vez para entender melhor o processo. Question Use o comando continue para continuar o programa. Voc\u00ea deve estar agora na segunda execu\u00e7\u00e3o de funcao2 . Use o comando x para mostrar o valor armazenado na mem\u00f3ria calculada acima. Lendo o c\u00f3digo do programa, voc\u00ea consegue dizer qual vari\u00e1vel \u00e9 armazenada neste endere\u00e7o? O valor atual \u00e9 o esperado para a segunda execu\u00e7\u00e3o de funcao2 ? Al\u00e9m de poder mostrar valores na mem\u00f3ria podemos escrever valores tamb\u00e9m. A sintaxe usada \u00e9 a seguinte: set *( (tipo *) 0x.....) = valor onde devemos substituir tipo por um tipo b\u00e1sico de C , 0x... pelo endere\u00e7o desejado e valor pelo valor que queremos escrever. Note que o que estamos fazendo \u00e9 um cast do endere\u00e7o 0x.... para um ponteiro de tipo e depois estamos acessando o valor apontado usando * ! Question Escreva o valor -10 na mem\u00f3ria da vari\u00e1vel global usada em funcao2 . Rode o programa at\u00e9 o fim. O resultado foi o esperado? Escreva abaixo os comandos utilizados. Desafio Localize na fun\u00e7\u00e3o main as chamadas ao comando printf . Encontre ent\u00e3o o endere\u00e7o das strings de formata\u00e7\u00e3o e use o comando x para mostr\u00e1-las no gdb. Escreva os comandos usados abaixo.","title":"03 - Arquitetura x86-64"},{"location":"aulas/03-arquitetura-x86/#03-arquitetura-x86-64","text":"No handout passado usamos o gdb para listar vari\u00e1veis globais, nomes de fun\u00e7\u00f5es e examinar endere\u00e7os de mem\u00f3ria. Neste handout vamos come\u00e7ar a usar o gdb tamb\u00e9m para examinar nossos programas durante sua execu\u00e7\u00e3o .","title":"03 - Arquitetura x86-64"},{"location":"aulas/03-arquitetura-x86/#parando-e-continuando-a-execucao-de-um-programa","text":"Question Compile funcao1.c usando as flags da disciplina ( -Og -g -Wall -std=c99 ). Abra o execut\u00e1vel com o gdb e liste suas fun\u00e7\u00f5es e suas vari\u00e1veis globais. N\u00e3o rode o programa ainda! Anote abaixo seus endere\u00e7os e nomes. Example O comando disas \u00e9 usado para mostrar as instru\u00e7\u00f5es de m\u00e1quina de uma fun\u00e7\u00e3o. Use-o para ver o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao1 . Liste abaixo quais registradores foram usados nesta fun\u00e7\u00e3o e qual o tamanho dos dados guardados neles. Example Com base nos tamanhos identificados, voc\u00ea consegue associar os registradores acima com as vari\u00e1veis no c\u00f3digo de funcao1 ? Example Use o comando breakpoint funcao1 para parar a execu\u00e7\u00e3o do programa quando a fun\u00e7\u00e3o funcao1 come\u00e7ar a executar. Execute o programa usando run . O qu\u00ea ocorre? Example Podemos usar o comando info registers edi para ver o conte\u00fado atual do registrador %edi . Qual \u00e9 este valor? Verifique quais argumentos s\u00e3o passados para funcao1 no c\u00f3digo C e, com estas informa\u00e7\u00f5es em m\u00e3os, verifique sua resposta da Tarefa 2 e escreva abaixo suas novas conclus\u00f5es. Example O comando stepi executa exatamente uma instru\u00e7\u00e3o de m\u00e1quina. Use-o uma vez e execute novamente disas funcao1 . O que aconteceu? \u00c9 poss\u00edvel saber em qual instru\u00e7\u00e3o o programa est\u00e1 parado? Dicas : use disas de novo verifique novamente o conte\u00fado de %edi Example Cheque novamente o valor de %edi . Este valor condiz com a instru\u00e7\u00e3o executada? O que ela faz, exatamente? Question Use stepi para parar logo antes do retorno da fun\u00e7\u00e3o. Verifique o conte\u00fado do registrador %eax e compare-o com os prints feitos pelo program. Voc\u00ea consegue dizer seu uso? Example Vamos agora analisar o registrador %rsi . Toda vez que um registrador aparece entre ( ) estamos fazendo um acesso a mem\u00f3ria. Ao mostrar seu conte\u00fado usando info registers rsi recebemos o endere\u00e7o de mem\u00f3ria que cont\u00e9m o dado que queremos acessar. Example Use o comando x para mostrar, em decimal, o int que est\u00e1 armazenado no endere\u00e7o descoberto no exerc\u00edcio anterior. Confira seu resultado com o c\u00f3digo. Example Execute o comando continue para continuar rodando o programa. Ele ir\u00e1 rodar at\u00e9 que o pr\u00f3ximo breakpoint seja alcan\u00e7ado ou at\u00e9 que o programa termine.","title":"Parando e continuando a execu\u00e7\u00e3o de um programa."},{"location":"aulas/03-arquitetura-x86/#enderecamento-relativo-e-variaveis-globais","text":"Na parte anterior analisamos o c\u00f3digo Assembly de nossa primeira fun\u00e7\u00e3o e vimos como mostrar o c\u00f3digo fonte de uma fun\u00e7\u00e3o usando disas mostrar o conte\u00fado de um registrador usando info registers executar exatamente uma instru\u00e7\u00e3o usando stepi Tamb\u00e9m vimos que ao colocar um registrador entre ( ) estamos fazendo um acesso a mem\u00f3ria. Esta opera\u00e7\u00e3o \u00e9 equivalente a desreferenciar um ponteiro usando *p . Neste roteiro iremos adicionar um detalhe importante: podemos fazer contas com endere\u00e7os usando esta nota\u00e7\u00e3o. Nos exemplo abaixo nos referimos a mem\u00f3ria como um grande vetor de bytes unsigned char M[] . Ou seja, ao acessar M[%rax] , por exemplo, estamos acessando o lugar na mem\u00f3ria cujo endere\u00e7o est\u00e1 escrito em %rax . 10(%rax) : acessa a mem\u00f3ria M[%rax + 10] . (%rax, %rdi, 4) : acessa a mem\u00f3ria M[%rax + 4 * % rdi] . Note que isto se parece com aritm\u00e9tica de ponteiros cujo tipo apontado seja inteiro, pois os endere\u00e7os pulam de 4 em 4 bytes. Example Saia e abra o gdb novamente. Mostre o c\u00f3digo de m\u00e1quina da fun\u00e7\u00e3o funcao2 e coloque um breakpoint em sua primeira instru\u00e7\u00e3o. Example Execute agora o programa. A execu\u00e7\u00e3o deve ter parado no in\u00edcio de funcao2 . Rode disas funcao2 . Question Voc\u00ea consegue identificar acessos a mem\u00f3ria em funcao2 ? Quais s\u00e3o de leitura e quais s\u00e3o de escrita? Qual o tamanho dos dados lidos/escritos? Question Qual o significado do registrador %rip ? Se n\u00e3o se lembrar reveja os slides. O tipo de acesso a mem\u00f3ria que estamos realizando se chama rip relative addressing . Este tipo de acesso \u00e9 reservado para vari\u00e1veis globais e dados somente leitura. Estes dados tem uma caracter\u00edstica especial: eles s\u00e3o copiados para a mem\u00f3ria seguindo o mesmo layout do arquivo execut\u00e1vel. Ou seja, as posi\u00e7\u00f5es relativas entre o c\u00f3digo e os dados globais s\u00e3o fixas. Question Anote abaixo o ende\u00e7o das fun\u00e7\u00f5es MOV que utilizam este acesso. Baseado nos exemplos acima, descubra o endere\u00e7o das vari\u00e1veis acessadas. Desenho de acesso a mem\u00f3ria usando %rip A figura abaixo ilustra como funciona o endere\u00e7amento usando o registrador %rip . Note que os deslocamentos s\u00e3o diferentes pois o endere\u00e7o da instru\u00e7\u00e3o atual \u00e9 diferente. Por\u00e9m, o resultado final do endere\u00e7o calculado em ambas instru\u00e7\u00f5es \u00e9 o mesmo, indicando que ambas se referem ao mesmo local na mem\u00f3ria. Example Confira se o valor identificado na quest\u00e3o anterior \u00e9 o mesmo mostrado a direita das instru\u00e7\u00f5es MOV na sa\u00edda do disas . O gdb j\u00e1 calcula este endere\u00e7o para facilitar nossa vida, mas \u00e9 interessante calcular isto manualmente uma vez para entender melhor o processo. Question Use o comando continue para continuar o programa. Voc\u00ea deve estar agora na segunda execu\u00e7\u00e3o de funcao2 . Use o comando x para mostrar o valor armazenado na mem\u00f3ria calculada acima. Lendo o c\u00f3digo do programa, voc\u00ea consegue dizer qual vari\u00e1vel \u00e9 armazenada neste endere\u00e7o? O valor atual \u00e9 o esperado para a segunda execu\u00e7\u00e3o de funcao2 ? Al\u00e9m de poder mostrar valores na mem\u00f3ria podemos escrever valores tamb\u00e9m. A sintaxe usada \u00e9 a seguinte: set *( (tipo *) 0x.....) = valor onde devemos substituir tipo por um tipo b\u00e1sico de C , 0x... pelo endere\u00e7o desejado e valor pelo valor que queremos escrever. Note que o que estamos fazendo \u00e9 um cast do endere\u00e7o 0x.... para um ponteiro de tipo e depois estamos acessando o valor apontado usando * ! Question Escreva o valor -10 na mem\u00f3ria da vari\u00e1vel global usada em funcao2 . Rode o programa at\u00e9 o fim. O resultado foi o esperado? Escreva abaixo os comandos utilizados. Desafio Localize na fun\u00e7\u00e3o main as chamadas ao comando printf . Encontre ent\u00e3o o endere\u00e7o das strings de formata\u00e7\u00e3o e use o comando x para mostr\u00e1-las no gdb. Escreva os comandos usados abaixo.","title":"Endere\u00e7amento relativo e vari\u00e1veis globais"}]}